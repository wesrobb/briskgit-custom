
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">

<head>
<title>D-Type Manual</title>
<link rel="stylesheet" type="text/css" href="../../common/include/style_001.css" />
</head>

<body>
<a href="../../common/manual/index.htm"><img src="../../common/images/index.gif" border="0" alt="Index" /></a><br />

<h1>C/C++ Functions</h1>

<h2>txEngineIniViaStream</h2><div class="box_prototype"><strong>
DT_SWORD txEngineIniViaStream(DT_TXENGINE* engine, const DT_STREAM_DESC* sd, DT_INIT_INFO* init_info)</strong></div><br /><strong>Short Description:</strong> <em>Create and initialize D-Type Text Engine - via stream</em><br /><br />

<p>The txEngineIniViaStream function creates and initializes a new instance of D-Type Text Engine (or simply <em>Engine</em> within the scope of D-Type Text Engine Manual) using a set of external initialization streams. The txEngineIniViaStream function must be called before any other D-Type Text Engine function can be used.</p>

<p>Applications can later associate one or more text documents with this Text Engine instance by calling the <a href="txTextIniViaStream.htm">txTextIniViaStream</a>, <a href="txTextIniViaBuffer.htm">txTextIniViaBuffer</a>, <a href="txTextMakeViaStream.htm">txTextMakeViaStream</a> or <a href="txTextMakeViaBuffer.htm">txTextMakeViaBuffer</a> functions. Consequently, before this Text Engine instance is destroyed using the <a href="txEngineExt.htm">txEngineExt</a> function, all of its text documents must first be destroyed using the <a href="txTextExt.htm">txTextExt</a> function.</p>

<p>It is important to understand that each Text Engine instance has its own internal instance of D-Type Power Engine. Together, these two engine instances hold a set of fonts, patterns, grayscale levels and other needed resources. Each Text Engine instance always owns exactly one internal D-Type Power Engine instance. More specifically, when your application creates a new instance of D-Type Text Engine by calling txEngineIniViaStream, D-Type Text Engine in turn automatically creates its own instance of D-Type Power Engine. To get a handle of this D-Type Power Engine instance, applications can call the <a href="txEngineGetPowerEngInst.htm">txEngineGetPowerEngInst</a> function. For more information on D-Type Power Engine, see D-Type Power Engine Manual.</p>


<h3>Parameters</h3>

<table class="table_data" summary="Description of function parameters">
<tr><th>Parameter</th><th>Description</th></tr>

<tr><td>
<p><em>engine</em></p>
</td><td>
<p>Pointer to the handle of the newly created Text Engine instance.</p>
</td></tr>

<tr><td>
<p><em>sd</em></p>
</td><td>
<p>A valid pointer to the <a href="../../dt/manual/structs.htm#DT_STREAM_DESC">DT_STREAM_DESC</a> structure which supplies the location of the main D-Type initialization file. This is the same file that is used to initialize D-Type Standard Engine or D-Type Power Engine (<em>dtype.inf</em>). For more information, please see the <a href="../../dt/funcs/dtEngineIniViaStream.htm">dtEngineIniViaStream</a> function in D-Type Standard Engine Manual. When appropriate, your application can provide its own (i.e. altered) version of the dtype.inf file. Also, it is possible for each Text Engine instance to be initialized via its own unique initialization file.</p>
</td></tr>

<tr><td>
<p><em>init_info</em></p>
</td><td>
<p>An optional pointer to the <a href="../../dt/manual/structs.htm#DT_INIT_INFO">DT_INIT_INFO</a> structure that provides additional initialization information to the engine and receives additional initialization information from the engine. This parameter has the same purpose as <em>init_info</em> in Standard Engine's <a href="../../dt/funcs/dtEngineIniViaStream.htm">dtEngineIniViaStream</a> function. For details, see the <a href="../../dt/funcs/dtEngineIniViaStream.htm">dtEngineIniViaStream</a> function in D-Type Standard Engine Manual. If you do not wish to make use of this parameter, simply set it to DV_NULL.</p>
</td></tr>

</table>


<h3>Return Value</h3>
<p>If the initialization was successful, the return value is 1 and <em>engine</em> holds a handle of the newly created Text Engine instance. Otherwise, the function returns 0 and <em>engine</em> holds DV_NULL. Applications that make use of the <em>init_info</em> structure can get extended error information via its <em>init_status</em> member.</p>


<h3>Comments</h3>
<p>An application can create multiple instances of D-Type Text Engine by calling the <a href="txEngineIniViaStream.htm">txEngineIniViaStream</a> function more than once. Each instance is created dynamically and must be destroyed by calling the <a href="txEngineExt.htm">txEngineExt</a> function before the application terminates. In multi-threaded applications, each thread can initialize its own Text Engine instance. This approach allows multiple threads to call the library's functions simultaneously (without using mutexes or other synchronization or blocking code). However, depending on the font cache, number of fonts and other utilized resources, a large number of Text Engine instances may require a significant amount of RAM.</p>


<h3>Related Functions</h3>
<p><a href="txEngineExt.htm">txEngineExt</a>, <a href="txEngineGetPowerEngInst.htm">txEngineGetPowerEngInst</a>, <a href="txEngineGetDTypeEngInst.htm">txEngineGetDTypeEngInst</a><br />
<a href="txTextIniViaStream.htm">txTextIniViaStream</a></p>


<h3>Note 1</h3>
<p>To ensure that the initialization is successful, the location that <em>sd</em> holds must point to the main D-Type initialization file. For more information on the structure of the main D-Type initialization file, see the <a href="../../dt/manual/inifiles.htm">Initialization Files</a> section of this document. In addition, any other stream descriptors that the main D-Type initialization file may contain (e.g. locations of the initial font list, pattern catalog, etc.) must be valid and should stay valid until the corresponding Text Engine instance is destroyed by calling <a href="txEngineExt.htm">txEngineExt</a>. Remember that D-Type Engine might attempt to open some of these streams later during the execution of your application so it is important to ensure that they remain accessible to D-Type Engine even after the <a href="txEngineIniViaStream.htm">txEngineIniViaStream</a> function returns.</p>


<h3>Note 2</h3>
<p>See <a href="../../dt/manual/streams.htm">How To Use D-Type Streams And Stream Macros</a>.</p>


<h3>Note 3</h3>
<p>See our <a href="../../dt/manual/fpaths.htm">notes regarding file based streams</a>.</p>


<h3>Note 4</h3>
<p>See our <a href="../../dt/manual/vcnote.htm">note for MS Visual C++ users</a>.</p>


<h3>Note 5</h3>
<p>Please note that any stream descriptors that are part of the <em>Optional Secondary Initialization Files</em> section of <em><a href="../../dt/manual/inifiles.htm#inf">dtype.inf</a></em> are optional. If not needed, they can be specified as NONE streams (<em>Stream&nbsp;ID</em>&nbsp;=&nbsp;-1, <em>Stream&nbsp;Locator</em>&nbsp;=&nbsp;NONE). Otherwise they must be valid or your initialization could fail.</p>


<h3>Note 6</h3>
<p><em>Char Translation and Alignment</em> stream descriptors (the <em>.ccv</em> file paths) that are specified within the <em>Font Factories</em> section of <em><a href="../../dt/manual/inifiles.htm#inf">dtype.inf</a></em> are highly recommended
because those files allow your application to create custom character encodings and, additionally, contain instruction designed to improve font rendering. Therefore, we do not recommend you specify them as NONE streams.</p>


<h3>Note 7</h3>
<p>This function is similar in design to <a href="../../pd/funcs/pdEngineIniViaStream.htm">pdEngineIniViaStream</a>. Please carefully review this function in D-Type Power Engine Manual.</p>



&nbsp;
<br />
<br />
<a href="../../common/manual/index.htm"><img src="../../common/images/index.gif" border="0" alt="Index" /></a><br />&nbsp;
</body>
</html>
