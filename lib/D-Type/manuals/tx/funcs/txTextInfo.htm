
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">

<head>
<title>D-Type Manual</title>
<link rel="stylesheet" type="text/css" href="../../common/include/style_001.css" />
</head>

<body>
<a href="../../common/manual/index.htm"><img src="../../common/images/index.gif" border="0" alt="Index" /></a><br />

<h1>C/C++ Functions</h1>

<h2>txTextInfo</h2><div class="box_prototype"><strong>
DT_SWORD txTextInfo(DT_TXDOC text_doc, DT_ID_SWORD info_type, DT_SLONG param, DT_SLONG reserved, DT_SLONG* info, DT_SLONG extra[])</strong></div><br /><strong>Short Description:</strong> <em>Get info about various properties, objects or features found in a text document</em><br /><br />

<p>txTextInfo is a general purpose function which, depending on the <em>info_type</em> value, returns information about various properties, objects or features found in a text document.</p>

<h3>Parameters</h3>

<table class="table_data" summary="Description of function parameters">
<tr><th>Parameter</th><th>Description</th></tr>

<tr><td>
<p><em>text_doc</em></p>
</td><td>
<p>Handle of the associated text document instance.</p>
</td></tr>

<tr><td>
<p><em>info_type</em></p>
</td><td>
<p>A value that identifies the type of information requested. See below for details.</p>
</td></tr>

<tr><td>
<p><em>param</em></p>
</td><td>
<p>An input parameter specific to the type of information requested.</p>
</td></tr>

<tr><td>
<p><em>reserved</em></p>
</td><td>
<p>Reserved for future use. Must be set to 0.</p>
</td></tr>

<tr><td>
<p><em>info</em></p>
</td><td>
<p>A pointer to a variable that will hold the returned info value.</p>
</td></tr>

<tr><td>
<p><em>extra</em></p>
</td><td>
<p>A pointer to an array of extra info values that will be returned. This array is allocated by the user and its size must be big enough to hold the number of returned info values, as indicated below. In some situations, this array can also hold additional input parameters.</p>
<p>Alternatively, this pointer can be set to DV_NULL. This means that no extra info values are needed and/or will be returned.</p>
</td></tr>


</table>


<h3>Return Value</h3>
<p>If the function was successful, the return value is 1. Otherwise, the function returns 0.</p>

<h3>Comments</h3>

<p>The type of the information returned depends on the <em>info_type</em> value specified. At present, the following <em>info_type</em> values are supported:</p>

<ol>
<li>

<p>If <em>info_type</em> is set to TX_INFO_TEXTAREA (0), <em>param</em> is the index of the textflow area in the text document and the function returns information about that textflow area as follows:</p>

<ul>
<li><em>info</em> &mdash; The index of the page that holds the textflow area</li>
<li><em>extra[0]</em> &mdash; Minimum character index in the textflow area</li>
<li><em>extra[1]</em> &mdash; Maximum character index in the textflow area</li>
<li><em>extra[2]</em> &mdash; Reserved for future use</li>
<li><em>extra[3]</em> &mdash; Reserved for future use</li>
</ul>

<p>The size of the <em>extra</em> array in this case must be at least 4 elements.</p>

</li>
<li>

<p>If <em>info_type</em> is set to TX_INFO_FRAMESET (1), <em>param</em> is the index of the textflow area in the text document and the function returns information about that textflow area's frames that were generated by one or several previous calls to <a href="txTextDraw.htm">txTextDraw</a>:</p>

<ul>
<li><em>info</em> &mdash; The index of the page that holds the textflow area</li>
<li><em>extra[0]</em> &mdash; Minimum character index in the textflow area's frameset</li>
<li><em>extra[1]</em> &mdash; Maximum character index in the textflow area's frameset</li>
<li><em>extra[2]</em> &mdash; Minimum row in the textflow area's frameset</li>
<li><em>extra[3]</em> &mdash; Maximum row in the textflow area's frameset</li>
<li><em>extra[4]</em> &mdash; Minimum character index of the row in which the cursor is</li>
<li><em>extra[5]</em> &mdash; Maximum character index of the row in which the cursor is</li>
</ul>

<p>The size of the <em>extra</em> array in this case must be at least 6 elements.</p>

</li>
<li>

<p>If <em>info_type</em> is set to TX_INFO_CURSOR (2), <em>param</em> is a flag which describes the type of character index requested and the function returns cursor specific information based on the frames that were generated by one or several previous calls to <a href="txTextDraw.htm">txTextDraw</a>:</p>

<ul>
<li><em>info</em> &mdash; Depending on the <em>param</em> this is:
<ul>
<li>Minimum character index for the active selection(s), when <em>param</em> = -1</li>
<li>Maximum character index for the active selection(s), when <em>param</em> = 1</li>
<li>Character index of the cursor, when <em>param</em> = 0</li>
</ul>
</li>
<li><em>extra[0]</em> &mdash; Character index in the frameset that corresponds to the returned <em>info</em> value; -1 if not found</li>
<li><em>extra[1]</em> &mdash; Row in the frameset that corresponds to the returned <em>info</em> value; -1 if not found</li>
<li><em>extra[2]</em> &mdash; Reserved for future use</li>
<li><em>extra[3]</em> &mdash; Reserved for future use</li>
</ul>

<p>The size of the <em>extra</em> array in this case must be at least 4 elements.</p>

</li>
<li>

<p>If <em>info_type</em> is set to TX_INFO_COMMAND (3), <em>param</em> is one of the following commands (a subset of commands that is normally passed to <a href="txTextCommand.htm">txTextCommand</a>):</p>

<div class="box_field">


<pre>
TX_CMD_LEFT                    3   <span class="codecomment">/* Go to previous visible character */</span>&nbsp;
TX_CMD_RIGHT                   4   <span class="codecomment">/* Go to next visible character */</span>&nbsp;
TX_CMD_UP                      5   <span class="codecomment">/* Go to previous row */</span>&nbsp;
TX_CMD_DOWN                    6   <span class="codecomment">/* Go to next row */</span>&nbsp;
TX_CMD_SHIFT_LEFT              7   <span class="codecomment">/* Shift + Go to previous visible character */</span>&nbsp;
TX_CMD_SHIFT_RIGHT             8   <span class="codecomment">/* Shift + Go to next visible character */</span>&nbsp;
TX_CMD_SHIFT_UP                9   <span class="codecomment">/* Shift + Go to previous row */</span>&nbsp;
TX_CMD_SHIFT_DOWN             10   <span class="codecomment">/* Shift + Go to next row */</span>&nbsp;

TX_CMD_SET                    11   <span class="codecomment">/* Set cursor to closest visible position */</span>&nbsp;
TX_CMD_CURRCHAR               12   <span class="codecomment">/* Go to current character */</span>&nbsp;
TX_CMD_CURRTEXT               53   <span class="codecomment">/* Same as TX_CMD_CURRCHAR but safer (checks bounds in case the text is changed externally) */</span>&nbsp;

TX_CMD_PREVCHAR               13   <span class="codecomment">/* Go to previous character */</span>&nbsp;
TX_CMD_PREVWORD               14   <span class="codecomment">/* Go to previous word */</span>&nbsp;
TX_CMD_PREVLINE               15   <span class="codecomment">/* Go to previous text line */</span>&nbsp;
TX_CMD_PREVPARAGRAPH          16   <span class="codecomment">/* Go to previous paragraph */</span>&nbsp;
TX_CMD_PREVAREA               17   <span class="codecomment">/* Go to previous text area */</span>&nbsp;
TX_CMD_NEXTCHAR               18   <span class="codecomment">/* Go to next character */</span>&nbsp;
TX_CMD_NEXTWORD               19   <span class="codecomment">/* Go to next word */</span>&nbsp;
TX_CMD_NEXTLINE               20   <span class="codecomment">/* Go to next text line */</span>&nbsp;
TX_CMD_NEXTPARAGRAPH          21   <span class="codecomment">/* Go to next paragraph */</span>&nbsp;
TX_CMD_NEXTAREA               22   <span class="codecomment">/* Go to next text area */</span>&nbsp;

TX_CMD_SHIFT_PREVCHAR         23   <span class="codecomment">/* Shift + Go to previous character */</span>&nbsp;
TX_CMD_SHIFT_PREVWORD         24   <span class="codecomment">/* Shift + Go to previous word */</span>&nbsp;
TX_CMD_SHIFT_PREVLINE         25   <span class="codecomment">/* Shift + Go to previous text line */</span>&nbsp;
TX_CMD_SHIFT_PREVPARAGRAPH    26   <span class="codecomment">/* Shift + Go to previous paragraph */</span>&nbsp;
TX_CMD_SHIFT_PREVAREA         27   <span class="codecomment">/* Shift + Go to previous text area */</span>&nbsp;
TX_CMD_SHIFT_NEXTCHAR         28   <span class="codecomment">/* Shift + Go to next character */</span>&nbsp;
TX_CMD_SHIFT_NEXTWORD         29   <span class="codecomment">/* Shift + Go to next word */</span>&nbsp;
TX_CMD_SHIFT_NEXTLINE         30   <span class="codecomment">/* Shift + Go to next text line */</span>&nbsp;
TX_CMD_SHIFT_NEXTPARAGRAPH    31   <span class="codecomment">/* Shift + Go to next paragraph */</span>&nbsp;
TX_CMD_SHIFT_NEXTAREA         32   <span class="codecomment">/* Shift + Go to next text area */</span>&nbsp;

TX_CMD_STARTWORD              33   <span class="codecomment">/* Go to start of word */</span>&nbsp;
TX_CMD_STARTLINE              34   <span class="codecomment">/* Go to start of text line */</span>&nbsp;
TX_CMD_STARTPARAGRAPH         35   <span class="codecomment">/* Go to start of paragraph */</span>&nbsp;
TX_CMD_STARTAREA              36   <span class="codecomment">/* Go to start of text area */</span>&nbsp;
TX_CMD_STARTTEXT              37   <span class="codecomment">/* Go to start of text */</span>&nbsp;
TX_CMD_ENDWORD                38   <span class="codecomment">/* Go to end of word */</span>&nbsp;
TX_CMD_ENDLINE                39   <span class="codecomment">/* Go to end of text line */</span>&nbsp;
TX_CMD_ENDPARAGRAPH           40   <span class="codecomment">/* Go to end of paragraph */</span>&nbsp;
TX_CMD_ENDAREA                41   <span class="codecomment">/* Go to end of text area */</span>&nbsp;
TX_CMD_ENDTEXT                42   <span class="codecomment">/* Go to end of text */</span>&nbsp;

TX_CMD_SHIFT_STARTWORD        43   <span class="codecomment">/* Shift + Go to start of word */</span>&nbsp;
TX_CMD_SHIFT_STARTLINE        44   <span class="codecomment">/* Shift + Go to start of text line */</span>&nbsp;
TX_CMD_SHIFT_STARTPARAGRAPH   45   <span class="codecomment">/* Shift + Go to start of paragraph */</span>&nbsp;
TX_CMD_SHIFT_STARTAREA        46   <span class="codecomment">/* Shift + Go to start of text area */</span>&nbsp;
TX_CMD_SHIFT_STARTTEXT        47   <span class="codecomment">/* Shift + Go to start of text */</span>&nbsp;
TX_CMD_SHIFT_ENDWORD          48   <span class="codecomment">/* Shift + Go to end of word */</span>&nbsp;
TX_CMD_SHIFT_ENDLINE          49   <span class="codecomment">/* Shift + Go to end of text line  */</span>&nbsp;
TX_CMD_SHIFT_ENDPARAGRAPH     50   <span class="codecomment">/* Shift + Go to end of paragraph */</span>&nbsp;
TX_CMD_SHIFT_ENDAREA          51   <span class="codecomment">/* Shift + Go to end of text area */</span>&nbsp;
TX_CMD_SHIFT_ENDTEXT          52   <span class="codecomment">/* Shift + Go to end of text */</span>&nbsp;
</pre>

</div>

<p>In this case the variable pointed by the <em>info</em> pointer will hold the character position to which the specified command would take the cursor to, if it was passed to <a href="txTextCommand.htm">txTextCommand</a>. The pointer to the <em>extra</em> array is not used in this case and should be set to DV_NULL.</p>

</li>
<li>

<p>If <em>info_type</em> is set to TX_INFO_SELECTED (4), <em>param</em> is ignored and the function returns information about the selected textflow area.</p>

<ul>
<li><em>info</em> &mdash; 1 indicates success, 0 failure (bad input)</li>
<li><em>extra[0]</em> &mdash; Textflow's PowerDoc Image (<em>Img</em>)</li>
<li><em>extra[1]</em> &mdash; Textflow's parent PowerDoc Object (<em>ParentObj</em>)</li>
<li><em>extra[2]</em> &mdash; Minimum character index of the first active selection</li>
<li><em>extra[3]</em> &mdash; Maximum  character index of the first active selection</li>
</ul>


</li>
<li>

<p>If <em>info_type</em> is set to TX_INFO_HIT (5), the function returns information about the textflow area that encloses a hit point.</p>

<ul>
<li><em>info</em> &mdash; character index in the textflow area that the hit point is closest to</li>
<li><em>extra[0]</em> &mdash; On input this is the x coordinate of the hit point in pixels; on return this is the textflow's PowerDoc Image (<em>Img</em>)</li>
<li><em>extra[1]</em> &mdash; On input this is the y coordinate of the hit point in pixels; on return this is the textflow's parent PowerDoc Object (<em>ParentObj</em>)</li>
</ul>

<p>If no textflow area encloses the specified hit point and <em>param</em> is non-zero, the function will search for the closest textflow area on the same page. If <em>param</em> is zero, the function will not search for the closest textflow area.</p>

</li>

</ol>




&nbsp;
<br />
<br />
<a href="../../common/manual/index.htm"><img src="../../common/images/index.gif" border="0" alt="Index" /></a><br />&nbsp;
</body>
</html>
