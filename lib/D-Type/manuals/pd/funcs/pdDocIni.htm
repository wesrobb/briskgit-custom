
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">

<head>
<title>D-Type Manual</title>
<link rel="stylesheet" type="text/css" href="../../common/include/style_001.css" />
</head>

<body>
<a href="../../common/manual/index.htm"><img src="../../common/images/index.gif" border="0" alt="Index" /></a><br />

<h1>C/C++ Functions</h1>

<h2>pdDocIni</h2><div class="box_prototype"><strong>
DT_SWORD pdDocIni(DT_PDDOC* power_doc, DT_PDENGINE engine)</strong></div><br /><strong>Short Description:</strong> <em>Create and initialize document</em><br /><br />

<p>The <strong>pdDocIni</strong> function creates and initializes a new Power Engine document. A Power Engine document initialized in this way is blank, i.e. it does not contain any PowerDoc objects or PowerDoc images.</p>


<h3>Parameters</h3>

<table class="table_data" summary="Description of function parameters">
<tr><th>Parameter</th><th>Description</th></tr>

<tr><td>
<p><em>power_doc</em></p>
</td><td>
<p>Pointer to the handle of the newly created Power Engine document.</p>
</td></tr>

<tr><td>
<p><em>engine</em></p>
</td><td>
<p>Handle of the Power Engine instance to be associated with the newly created Power Engine document. The associated Power Engine will then be responsible for handling and rendering the document. It is important to note that many Power Engine documents can be associated with the same Power Engine. This means that a single Power Engine can handle and render many Power Engine documents.</p>
</td></tr>

</table>


<h3>Return Value</h3>
<p>If the initialization was successful, the return value is 1. Otherwise, the function returns 0.</p>


<h3>Comments</h3>
<p>In Power Engine API, a new empty Power Engine document is created by calling the pdDocIni function. To create a new empty Power Engine document, an application must specify the Power Engine instance that will handle and render this document. In a typical application, a single Power Engine instance will handle and render all Power Engine documents that are created during its execution. This means that most applications will use the same <em>engine</em> in every call to pdDocIni. This is also the recommended approach. Exceptions are certain types of multi-threaded applications in which Power Engine documents must be accessed and rendered simultaneously. In those cases, it is possible to have a pool of Power Engine instances set up in a way that allows each Power Engine instance to handle one (or a certain number) of Power Engine documents.</p>
<p>Each Power Engine document is created dynamically and must be destroyed by calling the <a href="pdDocExt.htm">pdDocExt</a> function before its Power Engine instance is destroyed.</p>


<h3>Related Functions</h3>
<p><a href="pdDocExt.htm">pdDocExt</a></p>



&nbsp;
<br />
<br />
<a href="../../common/manual/index.htm"><img src="../../common/images/index.gif" border="0" alt="Index" /></a><br />&nbsp;
</body>
</html>
