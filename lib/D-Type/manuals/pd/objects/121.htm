
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">

<head>
<title>D-Type Manual</title>
<link rel="stylesheet" type="text/css" href="../../common/include/style_001.css" />
</head>

<body>
<a href="../../common/manual/index.htm"><img src="../../common/images/index.gif" border="0" alt="Index" /></a><br />

<h1>PowerDoc Objects</h1>

<h2>Bitmap Image</h2>
<h3 id="overview">Overview</h3>
This object represents a standard bitmap image. In Power Engine API, a bitmap image is a picture created by a pattern of pixels. Bitmap images can be used to represent photographs, icons, complex graphics etc.<br />
<br />
<strong>Designated Rendering Function:</strong> pdDrawImage (15)<br />
<h3 id="links">Links</h3>
<div class="pdoc_obj_descr"><h4 id="pdImageDataPtr"><em><span class="field">pdImageDataPtr</span> (1048)</em></h4>
<p>
Link to the <a href="008.htm">Bitmap Image Data</a> object.<br />
</p>
</div>
<h3 id="props">Properties</h3>
<div class="pdoc_obj_descr"><h4 id="pdDw"><em><span class="field">pdDw</span> (1029)</em> &nbsp; <small class="label">PD_LONG_SIGNED</small></h4>
<p class="also_appears_in"><small>Also appears in: <a href="009.htm#pdDw">PowerFont Record</a>, <a href="010.htm#pdDw">PowerFont</a>, <a href="129.htm#pdDw">Library Polyline</a>, <a href="110.htm#pdDw">Library Shape</a>, <a href="111.htm#pdDw">Line</a>, <a href="112.htm#pdDw">Rectangle</a>, <a href="113.htm#pdDw">Circle/Ellipse</a>, <a href="117.htm#pdDw">Pattern</a>, <a href="118.htm#pdDw">Grid</a>, <a href="120.htm#pdDw">Gradient</a>, <a href="125.htm#pdDw">Gradient (As Fast Rectangle)</a>, <a href="126.htm#pdDw">Gradient (As Inverter)</a>, <a href="132.htm#pdDw">Library Bitmap Image</a></small></p>
<p>
In general, this property represents the width of a line, shape or some other object in document units. Most objects assume a positive width. However, some objects (e.g. lines) can have either a positive or a negative width. In these cases, this property also indicates the direction.<br />
<br />
This property may also be used for some other more specific purposes. For example, in PowerFonts it refers to the font's base width (or horizontal units per em-square). Similarly, in PowerFont records this property serves as the advance width of a glyph.<br />
<br />
<strong>Sample values:</strong><br />
<br />
500 = Width of 500 document units<br />
-200 = Width of -200 document units<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdDh"><em><span class="field">pdDh</span> (1030)</em> &nbsp; <small class="label">PD_LONG_SIGNED</small></h4>
<p class="also_appears_in"><small>Also appears in: <a href="010.htm#pdDh">PowerFont</a>, <a href="129.htm#pdDh">Library Polyline</a>, <a href="110.htm#pdDh">Library Shape</a>, <a href="111.htm#pdDh">Line</a>, <a href="112.htm#pdDh">Rectangle</a>, <a href="113.htm#pdDh">Circle/Ellipse</a>, <a href="117.htm#pdDh">Pattern</a>, <a href="118.htm#pdDh">Grid</a>, <a href="120.htm#pdDh">Gradient</a>, <a href="125.htm#pdDh">Gradient (As Fast Rectangle)</a>, <a href="126.htm#pdDh">Gradient (As Inverter)</a>, <a href="132.htm#pdDh">Library Bitmap Image</a></small></p>
<p>
In general, this property represents the height of a line, shape or other object in document units. Most objects assume a positive height. But some objects (e.g. lines) can have either a positive or a negative height. In these cases, the height property also indicates the direction.<br />
<br />
This property may also be used for some other more specific purposes. For example, in PowerFonts this property refers to the font's base height (or vertical units per em-square).<br />
<br />
<strong>Sample values:</strong><br />
<br />
400 = Height of 400 document units<br />
-100 = Height of -100 document units<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdT"><em><span class="field">pdT</span> (1000)</em> &nbsp; <small class="label">PD_BYTE_UNSIGNED</small></h4>
<p class="also_appears_in"><small>Also appears in: <a href="132.htm#pdT">Library Bitmap Image</a></small></p>
<p>
Transparency. The value 0 means minimum intensity, 255 means maximum intensity.<br />
<br />
<strong>Sample values:</strong><br />
<br />
0 = Fully opaque<br />
127 = 50% transparent<br />
255 = Fully transparent<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdQuality"><em><span class="field">pdQuality</span> (1047)</em> &nbsp; <small class="label">PD_BYTE_UNSIGNED</small></h4>
<p class="also_appears_in"><small>Also appears in: <a href="132.htm#pdQuality">Library Bitmap Image</a></small></p>
<p>
Quality.<br />
<br />
<strong>Supported values:</strong><br />
<br />
0 = Low Quality But Fast<br />
1 = High Quality But Slower<br />
2 = Very High Quality But Slower<br />
3 = Very High Quality (More Blur) But Slower<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdSmoothing"><em><span class="field">pdSmoothing</span> (1137)</em> &nbsp; <small class="label">PD_BYTE_UNSIGNED</small></h4>
<p class="also_appears_in"><small>Also appears in: <a href="132.htm#pdSmoothing">Library Bitmap Image</a></small></p>
<p>
Edge smoothing for bitmap images. Respected only when the bitmap image's quality level is set to 1, 2 or 3.<br />
<br />
<strong>Supported values:</strong><br />
<br />
0 = Edge smoothing is off<br />
1 = Edge smoothing is on, inward (does not change the image boundary)<br />
2 = Edge smoothing is on, outward (extends the image boundary by a small amount)<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdRangeRR"><em><span class="field">pdRangeRR</span> (1049)</em> &nbsp; <small class="label">PD_HEX</small></h4>
<p class="also_appears_in"><small>Also appears in: <a href="132.htm#pdRangeRR">Library Bitmap Image</a></small></p>
<p>
Initial and final intensity of red (2 bytes). Used for grayscale images.<br />
<br />
<strong>Sample values:</strong><br />
<br />
"00 FF" = initial intensity is 0, final intensity is 255<br />
"CC 0A " = initial intensity is 204, final intensity is 10<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdBackground"><em><span class="field">pdBackground</span> (1138)</em> &nbsp; <small class="label">PD_HEX</small></h4>
<p class="also_appears_in"><small>Also appears in: <a href="132.htm#pdBackground">Library Bitmap Image</a></small></p>
<p>
Background color bytes when edge smoothing is enabled (4 bytes). This property is respected only when edge smoothing is enabled, as follows:<br />
<br />
- In RGBA images all 4 bytes are used; these 4 bytes represent the background color of an image. The color value is interpreted the same way as the color value of each individual pixel in the corresponding pdImageDataRGBAlpha property of the Bitmap Image Data object.<br />
<br />
- In RGB images the first three bytes are used; these 3 bytes represent the background color of an image. The color value is interpreted the same way as the color value of each individual pixel in the corresponding pdImageDataRGB property of the Bitmap Image Data object. The fourth byte is unused and should be set to 255.<br />
<br />
- In GA images the first two bytes are used; these 2 bytes represent the background color of an image. The color value is interpreted the same way as the color value of each individual pixel in the corresponding pdImageDataGrayAlpha property of the Bitmap Image Data object. The last two bytes are unused and should be set to 255.<br />
<br />
- In G images only the first byte is used; this byte represent the background color of an image. The color value is interpreted the same way as the color value of each individual pixel in the corresponding pdImageDataGray property of the Bitmap Image Data object. The last three bytes are unused and should be set to 255.<br />
<br />
In all cases, the pdOrderingArr property affects the used bytes the same way as it affects the corresponding bytes in the pdImageDataRGBAlpha, pdImageDataRGB, pdImageDataGrayAlpha and pdImageDataGray properties.<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdRangeGG"><em><span class="field">pdRangeGG</span> (1050)</em> &nbsp; <small class="label">PD_HEX</small></h4>
<p class="also_appears_in"><small>Also appears in: <a href="132.htm#pdRangeGG">Library Bitmap Image</a></small></p>
<p>
Initial and final intensity of green (2 bytes). Used for grayscale images.<br />
<br />
<strong>Sample values:</strong><br />
<br />
"00 FF" = initial intensity is 0, final intensity is 255<br />
"CC 0A " = initial intensity is 204, final intensity is 10<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdRangeBB"><em><span class="field">pdRangeBB</span> (1051)</em> &nbsp; <small class="label">PD_HEX</small></h4>
<p class="also_appears_in"><small>Also appears in: <a href="132.htm#pdRangeBB">Library Bitmap Image</a></small></p>
<p>
Initial and final intensity of blue (2 bytes). Used for grayscale images.<br />
<br />
<strong>Sample values:</strong><br />
<br />
"00 FF" = initial intensity is 0, final intensity is 255<br />
"CC 0A " = initial intensity is 204, final intensity is 10<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdAlphaTreatment"><em><span class="field">pdAlphaTreatment</span> (1097)</em> &nbsp; <small class="label">PD_BYTE_UNSIGNED</small></h4>
<p>
For images that contain an alpha channel (pdImageDataGrayAlpha and pdImageDataRGBAlpha), this is the interpretation of the alpha channel. For monochrome images (pdImageDataMono) this is the interpretation of the bits (pixels) in each byte.<br />
<br />
<strong>Supported values:</strong><br />
<br />
For GA and RGBA images<br />
<br />
0 = Ignore the 2nd byte in GA images and 4th byte in RGBA images. Assuming that the channels are not reordered using the pdOrderingArr property, this will result in the alpha channel being ignored.<br />
1 = Alpha channel represents transparency. This is true even if the channels are reordered using the pdOrderingArr property.<br />
2 = Alpha channel represents opacity. This is true even even if the channels are reordered using the pdOrderingArr property.<br />
<br />
For monochrome images<br />
<br />
0 = Bits (pixels) in each byte are ordered left to right; 1 represent black, 0 represent white<br />
1 = Bits (pixels) in each byte are ordered left to right; 1 represent white, 0 represent black<br />
2 = Bits (pixels) in each byte are ordered right to left; 1 represent black, 0 represent white<br />
3 = Bits (pixels) in each byte are ordered right to left; 1 represent white, 0 represent black<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdOrderingArr"><em><span class="field">pdOrderingArr</span> (1134)</em> &nbsp; <small class="label">PD_ARR_BYTE_UNSIGNED</small></h4>
<p>
An array that specifies the order of the bytes (color channels) in each pixel in a bitmap image. This property works with all supported bitmap image formats that have at least 2 bytes (color channels) per pixel: pdImageDataGrayAlpha, pdImageDataRGB and pdImageDataRGBAlpha. It makes it possible to pass to D-Type Power Engine bitmap images in which individual pixels are stored using a pattern of GA, RGB or RGBA bytes in any order.<br />
<br />
The number of elements in the array must equal bytes_per_pixel, where bytes_per_pixel is 2 for pdImageDataGrayAlpha, 3 for pdImageDataRGB and 4 for pdImageDataRGBAlpha. The value of each element is the index of the corresponding color channel in each pixel and must not be smaller than 0 or greater than bytes_per_pixel - 1.<br />
<br />
If the size of the pdOrderingArr is not properly defined, D-Type Power Engine will not be able to display the bitmap image. It the value of some of the elements is out of range, D-Type Power Engine will display the image but will use the modulo bytes_per_pixel arithmetic to index the channels.<br />
<br />
<strong>Sample values for pdImageDataGrayAlpha bitmap images:</strong><br />
<br />
0, 1 = G channel's index is 0, A channel's index is 1<br />
1, 0 = G channel's index is 1, A channel's index is 0<br />
<br />
<strong>Sample values for pdImageDataRGB bitmap images:</strong><br />
<br />
0, 1, 2 = R channel's index is 0, G channel's index is 1, B channel's index is 2<br />
2, 1, 0 = R channel's index is 2, G channel's index is 1, B channel's index is 0<br />
1, 2, 0 = R channel's index is 1, G channel's index is 2, B channel's index is 0<br />
0, 2, 2 = R channel's index is 0, G channel's index is 2, B channel's index is 2 (in other words G and B color channels map to the same value)<br />
1, 1, 1 = R channel's index is 1, G channel's index is 1, B channel's index is 1 (in other words all color channels map to the same value, resulting in grayscale output)<br />
<br />
<strong>Sample values for pdImageDataRGBA bitmap images:</strong><br />
<br />
0, 1, 2, 3 = R channel's index is 0, G channel's index is 1, B channel's index is 2, A channel's index is 3<br />
2, 1, 0, 3 = R channel's index is 2, G channel's index is 1, B channel's index is 0, A channel's index is 3<br />
1, 2, 3, 0 = R channel's index is 1, G channel's index is 2, B channel's index is 3, A channel's index is 0<br />
3, 2, 1, 0 = R channel's index is 3, G channel's index is 2, B channel's index is 1, A channel's index is 0<br />
</p>
</div>
<h3 id="example">Example</h3>
<p><strong>C/C++</strong></p>
<div class="box_field"><tt>DT_ID_SLONG obj[2];<br />
<br />
obj[0] = pdObjAdd(pd, 0, "Grayscale Image Data");<br />
<strong>obj[1] = pdObjAdd(pd, 0, "Grayscale Image");</strong><br />
<br />
<span class="codecomment">/* Properties for object 0 */</span><br />
pdPropAdd(pd, obj[0], pdNw, "4", PD_WORD_UNSIGNED);<br />
pdPropAdd(pd, obj[0], pdNh, "4", PD_WORD_UNSIGNED);<br />
pdPropAdd(pd, obj[0], pdImageDataGray, "88880000 88880000 00008888 00008888", PD_HEX);<br />
<br />
<span class="codecomment">/* Properties for object 1 */</span><br />
<strong>pdLinkAdd(pd, obj[1], pdImageDataPtr, obj[0]);<br />
pdPropAdd(pd, obj[1], pdRangeRR, "77FF", PD_HEX);<br />
pdPropAdd(pd, obj[1], pdRangeGG, "44FF", PD_HEX);<br />
pdPropAdd(pd, obj[1], pdRangeBB, "66AA", PD_HEX);<br />
pdPropAdd(pd, obj[1], pdQuality, "0", PD_BYTE_UNSIGNED);<br />
pdPropAdd(pd, obj[1], pdDw, "312", PD_LONG_SIGNED);<br />
pdPropAdd(pd, obj[1], pdDh, "120", PD_LONG_SIGNED);<br />
pdPropAdd(pd, obj[1], pdT, "80", PD_BYTE_UNSIGNED);</strong><br />
<br />
<span class="codecomment">/* Image placement */</span><br />
<strong>pdImgAdd(pd, obj[1], 0, 50, 50, 0, 0, 0, pdDrawImage, DV_NULL);</strong><br />
</tt></div>
<p><strong>INTEGRAL DSL</strong></p>
<div class="box_field"><tt><span class="codecomment">/* Lambda shortcuts */</span><br />
<br />
local o = @(label = "") CDTObj(::my.doc, label); <span class="codecomment">/* to make object */</span><br />
local p = @(id, str, len = PD_DEFAULT) CDTProp(id, str, len); <span class="codecomment">/* to add property - general */</span><br />
local s = @(id, str) CDTPropStr(id, str); <span class="codecomment">/* to add property - string */</span><br />
local i = @(id, num) CDTPropInt(id, num); <span class="codecomment">/* to add property - integer */</span><br />
local l = @(id, obj) CDTLink(id, obj); <span class="codecomment">/* to add link */</span><br />
<br />
<span class="codecomment">/* Objects */</span><br />
<br />
local obj_0 = o("Grayscale Image Data");<br />
local obj_1 = o("Grayscale Image");<br />
<br />
<span class="codecomment">/* Object Properties */</span><br />
<br />
obj_0 + i(pdNw, 4);<br />
obj_0 + i(pdNh, 4);<br />
obj_0 + p(pdImageDataGray, "88880000 88880000 00008888 00008888");<br />
<br />
obj_1 + l(pdImageDataPtr, obj_0);<br />
obj_1 + s(pdRangeRR, "77FF");<br />
obj_1 + s(pdRangeGG, "44FF");<br />
obj_1 + s(pdRangeBB, "66AA");<br />
obj_1 + i(pdQuality, 0);<br />
obj_1 + i(pdDw, 312);<br />
obj_1 + i(pdDh, 120);<br />
obj_1 + i(pdT, 80);<br />
<br />
<span class="codecomment">/* Image Pinning */</span><br />
<br />
obj_1.Pin(0, 50, 50, pdDrawImage);<br />
</tt></div>



&nbsp;
<br />
<br />
<a href="../../common/manual/index.htm"><img src="../../common/images/index.gif" border="0" alt="Index" /></a><br />&nbsp;
</body>
</html>
