
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">

<head>
<title>D-Type Manual</title>
<link rel="stylesheet" type="text/css" href="../../common/include/style_001.css" />
</head>

<body>
<a href="../../common/manual/index.htm"><img src="../../common/images/index.gif" border="0" alt="Index" /></a><br />

<h1>PowerDoc Objects</h1>

<h2>Text Layout (Manual)</h2>
<h3 id="overview">Overview</h3>
This objects holds parameters that provide precise control over manual text layout. As such, the Text Layout (Manual) object can be used to build the <a href="127.htm">Text Design</a> and <a href="128.htm">Rich Text Design</a> object.<br />
<br />
<strong>Designated Rendering Function:</strong> NONE<br />
<br />
Note 1: pdPosArrX_08, pdPosArrX_16, pdPosArrX_24 and pdPosArrX_32 cannot be used at the same time. pdPosArrX_32 takes precedence over pdPosArrX_24. pdPosArrX_24 takes precedence over pdPosArrX_16. Finally, pdPosArrX_16 takes precedence over pdPosArrX_08.<br />
<br />
Note 2: pdPosArrY_08, pdPosArrY_16, pdPosArrY_24 and pdPosArrY_32 cannot be used at the same time. pdPosArrY_32 takes precedence over pdPosArrY_24. pdPosArrY_24 takes precedence over pdPosArrY_16. Finally, pdPosArrY_16 takes precedence over pdPosArrY_08.<br />
<h3 id="links">Links</h3>
<p>None</p>
<h3 id="props">Properties</h3>
<div class="pdoc_obj_descr"><h4 id="pdHinting"><em><span class="field">pdHinting</span> (1100)</em> &nbsp; <small class="label">PD_BYTE_UNSIGNED</small></h4>
<p class="also_appears_in"><small>Also appears in: <a href="005.htm#pdHinting">Text Layout (Automatic)</a></small></p>
<p>
Sets one of the hinting modes. The hinting mode tells the Typesetter how to interact with the pixel grid when rendering glyphs. See D-Type Standard Engine Manual for details.<br />
<br />
<strong>Supported values:</strong><br />
<br />
0 = Engine Default A (same as 8)<br />
<br />
1 = Engine Default B (same as 9)<br />
<br />
2 = User Default A (same as 4)<br />
<br />
3 = User Default B (same as 6)<br />
<br />
4 = X On, Y On<br />
Both X and Y edges are snapped to the pixel grid. As a result, both X and Y edges look reasonably sharp.<br />
<br />
5 = X On, Y Off<br />
Only X edges are snapped to the pixel grid. As a result, X edges look reasonably sharp, while Y edges look somewhat blurry.<br />
<br />
6 = X Off, Y On<br />
Only Y edges are snapped to the pixel grid. As a result, X edges look somewhat blurry, while Y edges look reasonably sharp.<br />
<br />
7 = X Off, Y Off<br />
Neither X nor Y edges are snapped to the pixel grid. As a result, both X and Y edges look somewhat blurry.<br />
<br />
8 = Auto A<br />
Same as 4 for standard font sizes, but disables hinting in the X and/or Y direction for very small and very big font sizes. This is done in order to improve speed when rendering using very small and very big font sizes. This is a useful and recommended mode since hinting is not really necessary at those sizes.<br />
<br />
9 = Auto B<br />
Same as 6 for standard font sizes, but disables hinting in the Y direction for very small and very big font sizes. This is done in order to improve speed when rendering using very small and very big font sizes. This is a useful and recommended mode since hinting is not really necessary at those sizes.<br />
<br />
All the above values are inherited from D-Type Standard Engine. See D-Type Standard Engine Manual for more details.<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdPositioning"><em><span class="field">pdPositioning</span> (1053)</em> &nbsp; <small class="label">PD_BYTE_UNSIGNED</small></h4>
<p class="also_appears_in"><small>Also appears in: <a href="005.htm#pdPositioning">Text Layout (Automatic)</a></small></p>
<p>
Sets one of the positioning modes. The positioning mode tells the Typesetter how to position glyphs. See D-Type Standard Engine Manual for details.<br />
<br />
<strong>Supported values:</strong><br />
<br />
0 = Engine Default A (same as 8)<br />
<br />
1 = Engine Default B (same as 9)<br />
<br />
2 = User Default A (same as 4)<br />
<br />
3 = User Default B (same as 5)<br />
<br />
4 = Frac X, Frac Y<br />
Both X and Y coordinates of origin points are placed at fractional positions. As a result, spacing between characters looks reasonably consistent in both the horizontal and vertical direction.<br />
<br />
5 = Frac X, Int Y<br />
X coordinates of origin points are placed at fractional positions, while Y coordinates are snapped to the closest whole pixel positions. As a result, spacing between characters looks reasonably consistent in horizontal direction and somewhat inconsistent in vertical direction.<br />
<br />
6 = Int X, Frac Y<br />
X coordinates of origin points are snapped to the closest whole pixel positions, while Y coordinates are placed at fractional positions. As a result, spacing between characters looks somewhat inconsistent in horizontal direction and reasonably consistent in vertical direction.<br />
<br />
7 = Int X, Int Y<br />
Both X and Y coordinates of origin points are snapped to the closest whole pixel positions. As a result, spacing between characters looks somewhat inconsistent in both the horizontal and vertical direction.<br />
<br />
8 = Auto A<br />
Same as 4 for standard font sizes, but disables fractional pixel positioning in the X and/or Y direction for very small and very big font sizes. This is done in order to improve bitmap cache efficiency when rendering using very small and very big font sizes. This is a useful and recommended mode since fractional pixel positioning is not really necessary at those sizes.<br />
<br />
9 = Auto B<br />
Same as 5 for standard font sizes, but disables fractional pixel positioning in the X direction for very small and very big font sizes. This is done in order to improve bitmap cache efficiency when rendering using very small and very big font sizes. This is a useful and recommended mode since fractional pixel positioning is not really necessary at those sizes.<br />
<br />
The above values are inherited from D-Type Standard Engine. See D-Type Standard Engine Manual for more details.<br />
<br />
When rendering Text Lines, Rich Text Lines, Text Areas and Rich Text Areas, the following values are also supported:<br />
<br />
10 = Enhanced Frac X, Frac Y<br />
This positioning mode is similar to mode 4 but designed to further enhance spacing between glyphs based on the context. This mode can noticeably improve glyph spacing when compared with mode 4 and is highly recommended.<br />
<br />
11 = Enhanced Frac X, Int Y<br />
This positioning mode is similar to mode 5 but designed to further enhance spacing between glyphs based on the context. This mode can noticeably improve glyph spacing when compared with mode 5 and is highly recommended.<br />
<br />
12 = Enhanced Int X, Frac Y<br />
This positioning mode is similar to mode 6 but designed to further enhance spacing between glyphs based on the context. This mode can significantly improve glyph spacing when compared with mode 6 and is highly recommended.<br />
<br />
13 = Enhanced Int X, Int Y<br />
This positioning mode is similar to mode 7 but designed to further enhance spacing between glyphs based on the context. This mode can significantly improve glyph spacing when compared with mode 7 and is highly recommended.<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdRelativeDirection"><em><span class="field">pdRelativeDirection</span> (1074)</em> &nbsp; <small class="label">PD_BYTE_UNSIGNED</small></h4>
<p class="also_appears_in"><small>Also appears in: <a href="005.htm#pdRelativeDirection">Text Layout (Automatic)</a></small></p>
<p>
Text direction relative to the global text direction.<br />
<br />
<strong>Sample values:</strong><br />
<br />
0 = Same as global text direction<br />
1 = Opposite to global text direction<br />
2 = Same as global text direction (nested, level 1)<br />
3 = Opposite to global text direction (nested, level 1)<br />
4 = Same as global text direction (nested, level 2)<br />
5 = Opposite to global text direction (nested, level 2)<br />
6 = Same as global text direction (nested, level 3)<br />
7 = Opposite to global text direction (nested, level 3)<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdPosArrI"><em><span class="field">pdPosArrI</span> (1102)</em> &nbsp; <small class="label">PD_ARR_BYTE_UNSIGNED</small></h4>
<p>
Instructions for pdPosArrX_32 and pdPosArrY_32 (variable length, 1 byte per instruction).<br />
<br />
pdPosArrI is an array containing instructions that describe the corresponding pair of coordinates in the pdPosArrX_32 and pdPosArrY_32 arrays and provide some additional information about the letters (i.e. characters or glyphs). The length of the array should be the same as the number of letters. If the array is shorter, any missing instructions will assume the value 0. If the array is longer, any extra instructions will be ignored.<br />
<br />
Each instruction is a combination of the following bit independent bit values:<br />
<br />
Bit 0: If set (1), the corresponding letter starts a new text row. If not set (0), the letter is in the same (current) row. Visually, this bit has no impact on the text layout. However, its value is used to calculate and set the Row member of the DT_PD_FRAME structure when the text layout engine generates frames. This makes it possible to implement cursor movement in the vertical direction and not just horizontal.<br />
<br />
Bit 1: If set (1), the corresponding value in the pdPosArrX_32 is an absolute X coordinate. If not set (0), the corresponding value represents a relative delta (i.e. horizontal move relative to the previous X coordinate).<br />
<br />
Bit 2: If set (1), the corresponding value in the pdPosArrY_32 is an absolute Y coordinate. If not set (0), the corresponding value represents a relative delta (i.e. vertical move relative to the previous Y coordinate).<br />
<br />
The remaining bits are reserved for future use and must be set to 0.<br />
<br />
Based on the above, each element of the pdPosArrI array can represent one of the following 8 valid instructions:<br />
<br />
0 (000) : Y-RELATIVE, X-RELATIVE, SAME ROW<br />
1 (001) : Y-RELATIVE, X-RELATIVE, NEW ROW<br />
2 (010) : Y-RELATIVE, X-ABSOLUTE, SAME ROW<br />
3 (011) : Y-RELATIVE, X-ABSOLUTE, NEW ROW<br />
4 (100) : Y-ABSOLUTE, X-RELATIVE, SAME ROW<br />
5 (101) : Y-ABSOLUTE, X-RELATIVE, NEW ROW<br />
6 (110) : Y-ABSOLUTE, X-ABSOLUTE, SAME ROW<br />
7 (111) : Y-ABSOLUTE, X-ABSOLUTE, NEW ROW<br />
<br />
Any other instructions are invalid.<br />
<br />
<strong>Sample values:</strong><br />
<br />
0, 0, 0, 1, 0, 0, 0, 0, 7<br />
<br />
<strong>Tip:</strong><br />
<br />
If all the elements of the pdPosArrI array are 0, the array can be omitted. Similarly, all trailing zero values can be omitted. For example, the array 0, 0, 0, 1, 0, 0, 0, 0, 7 will have the same effect as the array 0, 0, 0, 1, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0.<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdPosArrX_08"><em><span class="field">pdPosArrX_08</span> (1149)</em> &nbsp; <small class="label">PD_ARR_BYTE_SIGNED</small></h4>
<p><small><strong>Supported Compression Methods: <a href="intro.htm#method_006">006</a></strong></small></p>
<p class="also_appears_in"><small>Also appears in: <a href="118.htm#pdPosArrX_08">Grid</a></small></p>
<p>
An array containing X coordinates for manual positioning (variable length, 1 byte per coordinate).<br />
<br />
Same as pdPosArrX_32 but uses 1 byte per coordinate.<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdPosArrX_16"><em><span class="field">pdPosArrX_16</span> (1148)</em> &nbsp; <small class="label">PD_ARR_WORD_SIGNED</small></h4>
<p><small><strong>Supported Compression Methods: <a href="intro.htm#method_004">004</a></strong></small></p>
<p class="also_appears_in"><small>Also appears in: <a href="118.htm#pdPosArrX_16">Grid</a></small></p>
<p>
An array containing X coordinates for manual positioning (variable length, 2 bytes per coordinate).<br />
<br />
Same as pdPosArrX_32 but uses 2 bytes per coordinate.<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdPosArrX_24"><em><span class="field">pdPosArrX_24</span> (1147)</em> &nbsp; <small class="label">PD_ARR_TRIO_SIGNED</small></h4>
<p><small><strong>Supported Compression Methods: <a href="intro.htm#method_002">002</a></strong></small></p>
<p class="also_appears_in"><small>Also appears in: <a href="118.htm#pdPosArrX_24">Grid</a></small></p>
<p>
An array containing X coordinates for manual positioning (variable length, 3 bytes per coordinate).<br />
<br />
Same as pdPosArrX_32 but uses 3 bytes per coordinate.<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdPosArrX_32"><em><span class="field">pdPosArrX_32</span> (1103)</em> &nbsp; <small class="label">PD_ARR_LONG_SIGNED</small></h4>
<p><small><strong>Supported Compression Methods: <a href="intro.htm#method_000">000</a></strong></small></p>
<p class="also_appears_in"><small>Also appears in: <a href="118.htm#pdPosArrX_32">Grid</a></small></p>
<p>
An array containing X coordinates for manual positioning (variable length, 4 bytes per coordinate).<br />
<br />
When used in the context of the Text Layout (Manual) object, pdPosArrX_32 is an array containing X coordinates or relative deltas needed to manually position the corresponding letters (i.e. characters or glyphs). The length of the array should be the same as the number of letters. If the array is shorter, any missing coordinates will assume the value 0. If the array is longer, any extra coordinates will be ignored. All X coordinates and relative deltas are specified in 1/256 document units (i.e. they are document units multiplied by 256). This provides the extra precision needed for precise text layout. Whether a value is an absolute X coordinate or relative delta depends on the corresponding instruction in the pdPosArrI.<br />
<br />
When used in the context of the Grid object, pdPosArrX_32 is an array containing X coordinates needed to manually position the vertical grid lines, relative to the grid's origin. The length of the array equals the number of vertical grid lines. All X coordinates are in document units. They must be non-negative and must not exceed the width of the Grid object.<br />
<br />
<strong>Sample values:</strong><br />
<br />
0, 12800, 25600, -16000, 15360, 15360, 15360, 29360, 15360, 25600, 25600, 25600, 25600<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdPosArrY_08"><em><span class="field">pdPosArrY_08</span> (1152)</em> &nbsp; <small class="label">PD_ARR_BYTE_SIGNED</small></h4>
<p><small><strong>Supported Compression Methods: <a href="intro.htm#method_006">006</a></strong></small></p>
<p class="also_appears_in"><small>Also appears in: <a href="118.htm#pdPosArrY_08">Grid</a></small></p>
<p>
An array containing Y coordinates for manual positioning (variable length, 1 byte per coordinate).<br />
<br />
Same as pdPosArrY_32 but uses 1 byte per coordinate.<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdPosArrY_16"><em><span class="field">pdPosArrY_16</span> (1151)</em> &nbsp; <small class="label">PD_ARR_WORD_SIGNED</small></h4>
<p><small><strong>Supported Compression Methods: <a href="intro.htm#method_004">004</a></strong></small></p>
<p class="also_appears_in"><small>Also appears in: <a href="118.htm#pdPosArrY_16">Grid</a></small></p>
<p>
An array containing Y coordinates for manual positioning (variable length, 2 bytes per coordinate).<br />
<br />
Same as pdPosArrY_32 but uses 2 bytes per coordinate.<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdPosArrY_24"><em><span class="field">pdPosArrY_24</span> (1150)</em> &nbsp; <small class="label">PD_ARR_TRIO_SIGNED</small></h4>
<p><small><strong>Supported Compression Methods: <a href="intro.htm#method_002">002</a></strong></small></p>
<p class="also_appears_in"><small>Also appears in: <a href="118.htm#pdPosArrY_24">Grid</a></small></p>
<p>
An array containing Y coordinates for manual positioning (variable length, 3 bytes per coordinate).<br />
<br />
Same as pdPosArrY_32 but uses 3 bytes per coordinate.<br />
</p>
</div>
<div class="pdoc_obj_descr"><h4 id="pdPosArrY_32"><em><span class="field">pdPosArrY_32</span> (1104)</em> &nbsp; <small class="label">PD_ARR_LONG_SIGNED</small></h4>
<p><small><strong>Supported Compression Methods: <a href="intro.htm#method_000">000</a></strong></small></p>
<p class="also_appears_in"><small>Also appears in: <a href="118.htm#pdPosArrY_32">Grid</a></small></p>
<p>
An array containing Y coordinates for manual positioning (variable length, 4 bytes per coordinate).<br />
<br />
When used in the context of the Text Layout (Manual) object, pdPosArrY_32 is an array containing Y coordinates or relative deltas needed to manually position the corresponding letters (i.e. characters or glyphs). The length of the array should be the same as the number of letters. If the array is shorter, any missing coordinates will assume the value 0. If the array is longer, any extra coordinates will be ignored. All Y coordinates and relative deltas are specified in 1/256 document units (i.e. they are document units multiplied by 256). This provides the extra precision needed for precise text layout. Whether a value is an absolute Y coordinate or relative delta depends on the corresponding instruction in the pdPosArrI.<br />
<br />
When used in the context of the Grid object, pdPosArrY_32 is an array containing Y coordinates needed to manually position the horizontal grid lines, relative to the grid's origin. The length of the array equals the number of horizontal grid lines. All Y coordinates are in document units. They must be non-negative and must not exceed the height of the Grid object.<br />
<br />
<strong>Sample values:</strong><br />
<br />
0, 6400, -6400, 25600, 0, 0, 0, 0, 55600<br />
</p>
</div>
<h3 id="example">Example</h3>
<p><strong>C/C++</strong></p>
<div class="box_field"><tt>DT_ID_SLONG obj[1];<br />
<br />
<strong>obj[0] = pdObjAdd(pd, 0, "Text Layout - Manual");</strong><br />
<br />
<span class="codecomment">/* Properties for object 0 */</span><br />
<strong>pdPropAdd(pd, obj[0], pdPosArrI, "0, 0, 0, 1, 0, 0, 0, 0, 7", PD_ARR_BYTE_UNSIGNED);<br />
pdPropAdd(pd, obj[0], pdPosArrX_32, "2000, 21800, 15600, -16000, 15360, 15360, 5360, 9360, 1360, 15600, 22600, 18600, 15600, 10000, 11000, 8000, 10000, 4100, 3000", PD_ARR_LONG_SIGNED);<br />
pdPropAdd(pd, obj[0], pdPosArrY_32, "0, 6400, -6400, 30600, 0, 0, 0, 0, 55600, 0, -1000, -1000, -1000, -1000, -3000, -5000, -11000, -14000, -15000", PD_ARR_LONG_SIGNED);<br />
pdPropAdd(pd, obj[0], pdHinting, "1", PD_BYTE_UNSIGNED);<br />
pdPropAdd(pd, obj[0], pdPositioning, "1", PD_BYTE_UNSIGNED);</strong><br />
</tt></div>
<p><strong>INTEGRAL DSL</strong></p>
<div class="box_field"><tt><span class="codecomment">/* Lambda shortcuts */</span><br />
<br />
local o = @(label = "") CDTObj(::my.doc, label); <span class="codecomment">/* to make object */</span><br />
local p = @(id, str, len = PD_DEFAULT) CDTProp(id, str, len); <span class="codecomment">/* to add property - general */</span><br />
local s = @(id, str) CDTPropStr(id, str); <span class="codecomment">/* to add property - string */</span><br />
local i = @(id, num) CDTPropInt(id, num); <span class="codecomment">/* to add property - integer */</span><br />
local l = @(id, obj) CDTLink(id, obj); <span class="codecomment">/* to add link */</span><br />
<br />
<span class="codecomment">/* Objects */</span><br />
<br />
local obj_0 = o("Text Layout - Manual");<br />
<br />
<span class="codecomment">/* Object Properties */</span><br />
<br />
obj_0 + p(pdPosArrI, "0, 0, 0, 1, 0, 0, 0, 0, 7");<br />
obj_0 + p(pdPosArrX_32, "2000, 21800, 15600, -16000, 15360, 15360, 5360, 9360, 1360, 15600, 22600, 18600, 15600, 10000, 11000, 8000, 10000, 4100, 3000");<br />
obj_0 + p(pdPosArrY_32, "0, 6400, -6400, 30600, 0, 0, 0, 0, 55600, 0, -1000, -1000, -1000, -1000, -3000, -5000, -11000, -14000, -15000");<br />
obj_0 + i(pdHinting, 1);<br />
obj_0 + i(pdPositioning, 1);<br />
</tt></div>



&nbsp;
<br />
<br />
<a href="../../common/manual/index.htm"><img src="../../common/images/index.gif" border="0" alt="Index" /></a><br />&nbsp;
</body>
</html>
