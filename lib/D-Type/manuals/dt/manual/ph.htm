
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">

<head>
<title>D-Type Manual</title>
<link rel="stylesheet" type="text/css" href="../../common/include/style_001.css" />
</head>

<body>
<a href="../../common/manual/index.htm"><img src="../../common/images/index.gif" border="0" alt="Index" /></a><br />











<h1>Positioning And Hinting</h1>


<p>The following 16 images show the interaction of positioning and hinting when the <a href="../funcs/dtTypesetterSetPositioning.htm">dtTypesetterSetPositioning</a> and <a href="../funcs/dtTypesetterSetHinting.htm">dtTypesetterSetHinting</a> functions are independently called to set the positioning and hinting mode in the Typesetter. All 16 images show the same three text lines rendered at the same location on the screen. The only difference is that each image was generated using a different combination of positioning and hinting. The images were generated by the following code:</p>


<div class="box_field">
<pre>
<a href="structs.htm#DT_STYLE_ATTRIBS">DT_STYLE_ATTRIBS</a> style = {{0, 0}, {0, 0, 0, 0}, 0, DV_NULL};
<a href="structs.htm#DT_TYPE_ATTRIBS">DT_TYPE_ATTRIBS</a> type = {MYFONT_TIMES, 0, 0, 0, 0, {{20, 20, 0, 0, 0}}};

dtOutputSetStyleAttribs(engine, &amp;style, 0);
dtTypesetterSetTypeAttribs(engine, &amp;type, 0);

dtTypesetterSetHinting(engine, <strong>hinting</strong>, 0);
dtTypesetterSetPositioning(engine, <strong>positioning</strong>, 0);

dtxTextDoOutput_ANSI(engine, 20.0, 20.0, 0, DV_TEXTMODE_KERN_FRAC, DV_NULL, "sample text iiiii mmmmm sample text");
dtxTextDoOutput_ANSI(engine, 25.4, 40.4, 0, DV_TEXTMODE_KERN_FRAC, DV_NULL, "sample text iiiii mmmmm sample text");
dtxTextDoOutput_ANSI(engine, 30.8, 60.8, 0, DV_TEXTMODE_KERN_FRAC, DV_NULL, "sample text iiiii mmmmm sample text");
</pre>
</div>

<p>where <strong>hinting</strong> and <strong>positioning</strong> were independently assigned the values of 4, 5, 6 and 7, thus producing the total of 16 different image combinations.</p>

<p>The resulting images are magnified 3 times so that subtle sub-pixel differences can be viewed more easily.</p>

&nbsp;


<h2>Positioning = 4 (Frac X, Frac Y)</h2>

<h3>Positioning = 4 (Frac X, Frac Y), Hinting = 4 (X On, Y On)</h3>


<p class="center"><img src="../images/ph_4_4.gif" alt="Positioning=4, Hinting=4" border="1" /></p>

<p><strong>Positioning:</strong> Both X and Y coordinates of origin points are placed at fractional positions. As a result, spacing between characters looks reasonably consistent in both the horizontal and vertical direction.</p>
<p><strong>Hinting:</strong> Both X and Y edges are snapped to the pixel grid. As a result, both X and Y edges look reasonably sharp.</p>


<p><strong>Remarks:</strong> Since fractional positioning is enabled in at least one direction, the same character may look slightly different at different fractional positions (and consequently generates multiple bitmap images in the bitmap cache).</p>


<br />


<h3>Positioning = 4 (Frac X, Frac Y), Hinting = 5 (X On, Y Off)</h3>


<p class="center"><img src="../images/ph_4_5.gif" alt="Positioning=4, Hinting=5" border="1" /></p>

<p><strong>Positioning:</strong> Both X and Y coordinates of origin points are placed at fractional positions. As a result, spacing between characters looks reasonably consistent in both the horizontal and vertical direction.</p>
<p><strong>Hinting:</strong> Only X edges are snapped to the pixel grid. As a result, X edges look reasonably sharp, while Y edges look somewhat blurry.</p>


<p><strong>Remarks:</strong> Since fractional positioning is enabled in at least one direction, the same character may look slightly different at different fractional positions (and consequently generates multiple bitmap images in the bitmap cache).</p>


<br />


<h3>Positioning = 4 (Frac X, Frac Y), Hinting = 6 (X Off, Y On)</h3>


<p class="center"><img src="../images/ph_4_6.gif" alt="Positioning=4, Hinting=6" border="1" /></p>

<p><strong>Positioning:</strong> Both X and Y coordinates of origin points are placed at fractional positions. As a result, spacing between characters looks reasonably consistent in both the horizontal and vertical direction.</p>
<p><strong>Hinting:</strong> Only Y edges are snapped to the pixel grid. As a result, X edges look somewhat blurry, while Y edges look reasonably sharp.</p>


<p><strong>Remarks:</strong> Since fractional positioning is enabled in at least one direction, the same character may look slightly different at different fractional positions (and consequently generates multiple bitmap images in the bitmap cache).</p>


<br />


<h3>Positioning = 4 (Frac X, Frac Y), Hinting = 7 (X Off, Y Off)</h3>


<p class="center"><img src="../images/ph_4_7.gif" alt="Positioning=4, Hinting=7" border="1" /></p>

<p><strong>Positioning:</strong> Both X and Y coordinates of origin points are placed at fractional positions. As a result, spacing between characters looks reasonably consistent in both the horizontal and vertical direction.</p>
<p><strong>Hinting:</strong> Neither X nor Y edges are snapped to the pixel grid. As a result, both X and Y edges look somewhat blurry.</p>


<p><strong>Remarks:</strong> Since fractional positioning is enabled in at least one direction, the same character may look slightly different at different fractional positions (and consequently generates multiple bitmap images in the bitmap cache).</p>


<br />



<h2>Positioning = 5 (Frac X, Int Y)</h2>

<h3>Positioning = 5 (Frac X, Int Y), Hinting = 4 (X On, Y On)</h3>


<p class="center"><img src="../images/ph_5_4.gif" alt="Positioning=5, Hinting=4" border="1" /></p>

<p><strong>Positioning:</strong> X coordinates of origin points are placed at fractional positions, while Y coordinates are snapped to the closest whole pixel positions. As a result, spacing between characters looks reasonably consistent in the horizontal direction and somewhat inconsistent in the vertical direction (inconsistent vertical positioning may be difficult to notice in this example as there are only three lines of text).</p>
<p><strong>Hinting:</strong> Both X and Y edges are snapped to the pixel grid. As a result, both X and Y edges look reasonably sharp.</p>


<p><strong>Remarks:</strong> Since fractional positioning is enabled in at least one direction, the same character may look slightly different at different fractional positions (and consequently generates multiple bitmap images in the bitmap cache).</p>


<br />


<h3>Positioning = 5 (Frac X, Int Y), Hinting = 5 (X On, Y Off)</h3>


<p class="center"><img src="../images/ph_5_5.gif" alt="Positioning=5, Hinting=5" border="1" /></p>

<p><strong>Positioning:</strong> X coordinates of origin points are placed at fractional positions, while Y coordinates are snapped to the closest whole pixel positions. As a result, spacing between characters looks reasonably consistent in the horizontal direction and somewhat inconsistent in the vertical direction (inconsistent vertical positioning may be difficult to notice in this example as there are only three lines of text).</p>
<p><strong>Hinting:</strong> Only X edges are snapped to the pixel grid. As a result, X edges look reasonably sharp, while Y edges look somewhat blurry.</p>


<p><strong>Remarks:</strong> Since fractional positioning is enabled in at least one direction, the same character may look slightly different at different fractional positions (and consequently generates multiple bitmap images in the bitmap cache).</p>


<br />


<h3>Positioning = 5 (Frac X, Int Y), Hinting = 6 (X Off, Y On)</h3>


<p class="center"><img src="../images/ph_5_6.gif" alt="Positioning=5, Hinting=6" border="1" /></p>

<p><strong>Positioning:</strong> X coordinates of origin points are placed at fractional positions, while Y coordinates are snapped to the closest whole pixel positions. As a result, spacing between characters looks reasonably consistent in the horizontal direction and somewhat inconsistent in the vertical direction (inconsistent vertical positioning may be difficult to notice in this example as there are only three lines of text).</p>
<p><strong>Hinting:</strong> Only Y edges are snapped to the pixel grid. As a result, X edges look somewhat blurry, while Y edges look reasonably sharp.</p>


<p><strong>Remarks:</strong> Since fractional positioning is enabled in at least one direction, the same character may look slightly different at different fractional positions (and consequently generates multiple bitmap images in the bitmap cache).</p>


<br />


<h3>Positioning = 5 (Frac X, Int Y), Hinting = 7 (X Off, Y Off)</h3>


<p class="center"><img src="../images/ph_5_7.gif" alt="Positioning=5, Hinting=7" border="1" /></p>

<p><strong>Positioning:</strong> X coordinates of origin points are placed at fractional positions, while Y coordinates are snapped to the closest whole pixel positions. As a result, spacing between characters looks reasonably consistent in the horizontal direction and somewhat inconsistent in the vertical direction (inconsistent vertical positioning may be difficult to notice in this example as there are only three lines of text).</p>
<p><strong>Hinting:</strong> Neither X nor Y edges are snapped to the pixel grid. As a result, both X and Y edges look somewhat blurry.</p>


<p><strong>Remarks:</strong> Since fractional positioning is enabled in at least one direction, the same character may look slightly different at different fractional positions (and consequently generates multiple bitmap images in the bitmap cache).</p>


<br />



<h2>Positioning = 6 (Int X, Frac Y)</h2>

<h3>Positioning = 6 (Int X, Frac Y), Hinting = 4 (X On, Y On)</h3>


<p class="center"><img src="../images/ph_6_4.gif" alt="Positioning=6, Hinting=4" border="1" /></p>

<p><strong>Positioning:</strong> X coordinates of origin points are snapped to the closest whole pixel positions, while Y coordinates are placed at fractional positions. As a result, spacing between characters looks somewhat inconsistent in the horizontal direction and reasonably consistent in the vertical direction.</p>
<p><strong>Hinting:</strong> Both X and Y edges are snapped to the pixel grid. As a result, both X and Y edges look reasonably sharp.</p>


<p><strong>Remarks:</strong> Since fractional positioning is enabled in at least one direction, the same character may look slightly different at different fractional positions (and consequently generates multiple bitmap images in the bitmap cache).</p>


<br />


<h3>Positioning = 6 (Int X, Frac Y), Hinting = 5 (X On, Y Off)</h3>


<p class="center"><img src="../images/ph_6_5.gif" alt="Positioning=6, Hinting=5" border="1" /></p>

<p><strong>Positioning:</strong> X coordinates of origin points are snapped to the closest whole pixel positions, while Y coordinates are placed at fractional positions. As a result, spacing between characters looks somewhat inconsistent in the horizontal direction and reasonably consistent in the vertical direction.</p>
<p><strong>Hinting:</strong> Only X edges are snapped to the pixel grid. As a result, X edges look reasonably sharp, while Y edges look somewhat blurry.</p>


<p><strong>Remarks:</strong> Since fractional positioning is enabled in at least one direction, the same character may look slightly different at different fractional positions (and consequently generates multiple bitmap images in the bitmap cache).</p>


<br />


<h3>Positioning = 6 (Int X, Frac Y), Hinting = 6 (X Off, Y On)</h3>


<p class="center"><img src="../images/ph_6_6.gif" alt="Positioning=6, Hinting=6" border="1" /></p>

<p><strong>Positioning:</strong> X coordinates of origin points are snapped to the closest whole pixel positions, while Y coordinates are placed at fractional positions. As a result, spacing between characters looks somewhat inconsistent in the horizontal direction and reasonably consistent in the vertical direction.</p>
<p><strong>Hinting:</strong> Only Y edges are snapped to the pixel grid. As a result, X edges look somewhat blurry, while Y edges look reasonably sharp.</p>


<p><strong>Remarks:</strong> Since fractional positioning is enabled in at least one direction, the same character may look slightly different at different fractional positions (and consequently generates multiple bitmap images in the bitmap cache).</p>


<br />


<h3>Positioning = 6 (Int X, Frac Y), Hinting = 7 (X Off, Y Off)</h3>


<p class="center"><img src="../images/ph_6_7.gif" alt="Positioning=6, Hinting=7" border="1" /></p>

<p><strong>Positioning:</strong> X coordinates of origin points are snapped to the closest whole pixel positions, while Y coordinates are placed at fractional positions. As a result, spacing between characters looks somewhat inconsistent in the horizontal direction and reasonably consistent in the vertical direction.</p>
<p><strong>Hinting:</strong> Neither X nor Y edges are snapped to the pixel grid. As a result, both X and Y edges look somewhat blurry.</p>


<p><strong>Remarks:</strong> Since fractional positioning is enabled in at least one direction, the same character may look slightly different at different fractional positions (and consequently generates multiple bitmap images in the bitmap cache).</p>


<br />



<h2>Positioning = 7 (Int X, Int Y)</h2>

<h3>Positioning = 7 (Int X, Int Y), Hinting = 4 (X On, Y On)</h3>


<p class="center"><img src="../images/ph_7_4.gif" alt="Positioning=7, Hinting=4" border="1" /></p>

<p><strong>Positioning:</strong> Both X and Y coordinates of origin points are snapped to the closest whole pixel positions. As a result, spacing between characters looks somewhat inconsistent in both the horizontal and vertical direction (inconsistent vertical positioning may be difficult to notice in this example as there are only three lines of text).</p>
<p><strong>Hinting:</strong> Both X and Y edges are snapped to the pixel grid. As a result, both X and Y edges look reasonably sharp.</p>

<p><strong>Remarks:</strong> Since fractional positioning is disabled in both directions, the same character always looks exactly the same regardless of its position (and consequently generates only one bitmap image in the bitmap cache as long as the hinting mode is constant).</p>



<br />


<h3>Positioning = 7 (Int X, Int Y), Hinting = 5 (X On, Y Off)</h3>


<p class="center"><img src="../images/ph_7_5.gif" alt="Positioning=7, Hinting=5" border="1" /></p>

<p><strong>Positioning:</strong> Both X and Y coordinates of origin points are snapped to the closest whole pixel positions. As a result, spacing between characters looks somewhat inconsistent in both the horizontal and vertical direction (inconsistent vertical positioning may be difficult to notice in this example as there are only three lines of text).</p>
<p><strong>Hinting:</strong> Only X edges are snapped to the pixel grid. As a result, X edges look reasonably sharp, while Y edges look somewhat blurry.</p>

<p><strong>Remarks:</strong> Since fractional positioning is disabled in both directions, the same character always looks exactly the same regardless of its position (and consequently generates only one bitmap image in the bitmap cache as long as the hinting mode is constant).</p>



<br />


<h3>Positioning = 7 (Int X, Int Y), Hinting = 6 (X Off, Y On)</h3>


<p class="center"><img src="../images/ph_7_6.gif" alt="Positioning=7, Hinting=6" border="1" /></p>

<p><strong>Positioning:</strong> Both X and Y coordinates of origin points are snapped to the closest whole pixel positions. As a result, spacing between characters looks somewhat inconsistent in both the horizontal and vertical direction (inconsistent vertical positioning may be difficult to notice in this example as there are only three lines of text).</p>
<p><strong>Hinting:</strong> Only Y edges are snapped to the pixel grid. As a result, X edges look somewhat blurry, while Y edges look reasonably sharp.</p>

<p><strong>Remarks:</strong> Since fractional positioning is disabled in both directions, the same character always looks exactly the same regardless of its position (and consequently generates only one bitmap image in the bitmap cache as long as the hinting mode is constant).</p>



<br />


<h3>Positioning = 7 (Int X, Int Y), Hinting = 7 (X Off, Y Off)</h3>


<p class="center"><img src="../images/ph_7_7.gif" alt="Positioning=7, Hinting=7" border="1" /></p>

<p><strong>Positioning:</strong> Both X and Y coordinates of origin points are snapped to the closest whole pixel positions. As a result, spacing between characters looks somewhat inconsistent in both the horizontal and vertical direction (inconsistent vertical positioning may be difficult to notice in this example as there are only three lines of text).</p>
<p><strong>Hinting:</strong> Neither X nor Y edges are snapped to the pixel grid. As a result, both X and Y edges look somewhat blurry.</p>

<p><strong>Remarks:</strong> Since fractional positioning is disabled in both directions, the same character always looks exactly the same regardless of its position (and consequently generates only one bitmap image in the bitmap cache as long as the hinting mode is constant).</p>



<br />





&nbsp;
<br />
<br />
<a href="../../common/manual/index.htm"><img src="../../common/images/index.gif" border="0" alt="Index" /></a><br />&nbsp;
</body>
</html>
